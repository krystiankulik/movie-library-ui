{"version":3,"sources":["components/Input/ActorsInput/ActorsInput.module.sass","App.module.sass","components/Header/Header.module.sass","components/ErrorMessage/ErrorMessage.module.sass","components/ClientFaultPage/ClientFaultPage.module.sass","components/Input/DurationInput/DurationInput.module.sass","hooks/queries/useGetAllMoviesQuery.ts","hooks/queries/useCurrentUserQuery.ts","common/utils.ts","common/constants.ts","components/RatingStars/RatingStarsView.tsx","hooks/useSorting.ts","components/MainDashboard/MainDashboard.tsx","hooks/useAuthToken.ts","hooks/mutations/useSignInMutation.ts","components/ErrorMessage/ErrorMessage.tsx","components/UserManagament/SignIn.tsx","hooks/mutations/useRegisterMutation.ts","components/UserManagament/Register.tsx","components/ClientFaultPage/ClientFaultPage.tsx","hooks/useAppApolloClient.ts","components/Header/Header.tsx","hooks/useLogOut.ts","hooks/mutations/useAddMovieMutation.ts","components/Input/DurationInput/DurationInput.tsx","components/Input/ActorsInput/ActorsInput.tsx","components/Input/ReleaseDateInput.tsx","components/Input/MovieNameInput.tsx","components/MovieInput/AddMovie.tsx","hooks/queries/useGetMovieQuery.ts","hooks/mutations/useRateMovieMutation.ts","hooks/mutations/useDeleteMovieMutation.ts","components/MovieDisplay/MovieDisplay.tsx","hooks/mutations/useEditMovieMutation.ts","components/MovieInput/EditMovie.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/MovieInput/MovieInput.module.sass","components/UserManagament/UserManagement.module.sass","components/MovieDisplay/MovieDisplay.module.sass","components/MainDashboard/MainDashboard.module.sass"],"names":["module","exports","GET_ALL_ITEMS","gql","CURRENT_USER_QUERY","useCurrentUserQuery","useQuery","addLeadingZero","n","String","length","getDurationString","minutes","Math","floor","utils","movie","id","name","releaseDate","dayjs","duration","actors","username","averageNote","date","format","setValue","event","target","value","RatingStarsView","props","Rating","precision","readOnly","SORTING_COLUMN","SORTING_DIRECTION","columns","field","headerName","width","type","valueFormatter","params","sortable","cellClassName","renderCell","className","styles","actorsCell","join","Number","makeColumnsResponsive","bigScreen","map","column","flex","useStyles","makeStyles","root","backgroundColor","cursor","whiteSpace","overflow","MainDashboard","classes","data","error","useMediaQuery","currentUser","history","useHistory","useCookies","cookies","setCookie","removeCookie","columnName","direction","useSorting","setSorting","removeSorting","useState","sortModel","setSortModel","useEffect","sort","dashboardContainer","infoDialog","to","renderSignInHint","dataGridContainer","rows","getAllMovies","pageSize","onSelectionChange","param","movieId","rowIds","push","onSortModelChange","newSortModel","rowHeight","TOKEN_NAME","useAuthToken","authToken","loginMutationGQL","useSignInMutation","setAuthToken","removeAuthToken","useMutation","onCompleted","login","token","mutation","password","variables","ErrorMessage","errorMessages","message","index","errorMessage","SignIn","setUsername","setPassword","setErrorMessages","signInMutation","mainContainer","formContainer","registerHint","formItem","TextField","label","onChange","Button","variant","color","onClick","errors","then","catch","registerMutationGQL","Register","React","passwordConfirm","setPasswordConfirm","useRegisterMutation","register","ClientFaultPage","container","text","httpLink","HttpLink","uri","mainLink","split","query","definition","getMainDefinition","kind","operation","WebSocketLink","options","reconnect","connectionParams","wsLink","authMiddleware","concat","ApolloLink","forward","setContext","headers","authorization","cache","InMemoryCache","typePolicies","Movie","fields","merge","existing","incoming","theme","createStyles","space","flexGrow","header","menuButton","marginRight","spacing","Header","logout","apolloClient","useApolloClient","a","clearStore","useLogout","goToSignInView","goToRegisterView","goToAddMovieView","logoutAndReturn","AppBar","position","Toolbar","homeButton","currentUsername","Typography","addMovieMutationGQL","getHours","getMinutes","getDurationValue","hours","DurationInput","memo","durationHours","setDurationHours","durationMinutes","setDurationMinutes","InputLabel","durationInput","setDuration","InputLabelProps","shrink","ActorsInput","newActor","setNewActor","chipContainer","actor","chipWrapper","Chip","onDelete","actorToDelete","setActors","filter","addTooltip","Tooltip","title","aria-label","includes","Fab","ReleaseDateInput","setDate","MovieNameInput","setName","AddMovie","update","mutationResult","modify","existingMovies","newMovieRef","writeFragment","addMovie","fragment","input","useAddMovieMutation","handleActors","useCallback","handleDuration","isValid","GET_ITEM","RATINGS_SUBSCRIPTION","useGetMovieQuery","loading","subscribeToMore","document","updateQuery","prev","subscriptionData","newRatingItem","ratingAdded","getMovie","ratings","rateMovieMutationGQL","removeMovieMutationGQL","MovieDisplay","selectedMovieId","subscribeToNewRatings","comment","setComment","note","setNote","useRateMovieMutation","rateMovie","readQuery","filteredMovies","removeMovie","useDeleteMovieMutation","deleteMovie","unsubscribe","movieDisplayable","rateMovieSubmit","console","editMovie","handleMovieDelete","detailsContainer","detailsInfoContainer","actionButtons","actionButton","size","rating","rateInput","inputFormItem","newValue","multiline","rowsMax","renderRateInput","comments","ratingInfo","editMovieMutationGQL","EditMovie","isDataDefined","undefined","useEditMovieMutation","backToMovieDetails","App","client","ApolloClient","link","useAppApolloClient","basename","process","appContainer","exact","path","component","render","routerProps","match","renderSelectedMovie","renderMovieEdition","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","CookiesProvider","getElementById"],"mappings":"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","file":"static/js/main.e39762df.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"addTooltip\":\"ActorsInput_addTooltip__KrXN5\",\"chipContainer\":\"ActorsInput_chipContainer__2RU2i\",\"chipWrapper\":\"ActorsInput_chipWrapper__2RzPi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appContainer\":\"App_appContainer__h_gBU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"currentUsername\":\"Header_currentUsername__3h585\",\"homeButton\":\"Header_homeButton__2IoHw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorMessage\":\"ErrorMessage_errorMessage__cx3Aj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ClientFaultPage_container__3KkNu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"durationInput\":\"DurationInput_durationInput__2NwsE\"};","import {gql, QueryResult, useQuery} from \"@apollo/client\";\r\nimport {MovieInfo} from \"../../apiSchema\";\r\n\r\nexport const GET_ALL_ITEMS = gql`\r\n    query GetAllMovies {\r\n        getAllMovies {\r\n            id,\r\n            name,\r\n            releaseDate,\r\n            duration,\r\n            actors,\r\n            averageNote,\r\n        }\r\n    }\r\n`;\r\n\r\nexport interface GetAllMoviesResponse {\r\n    getAllMovies: MovieInfo[];\r\n}\r\n\r\n\r\nexport const useGetAllMoviesQuery = (): QueryResult<GetAllMoviesResponse> => {\r\n    return useQuery<GetAllMoviesResponse>(GET_ALL_ITEMS);\r\n}\r\n","import {gql, QueryResult, useQuery} from \"@apollo/client\";\r\n\r\nconst CURRENT_USER_QUERY = gql`\r\n    query currentUSer {\r\n        currentUser {\r\n            username\r\n        }\r\n    }\r\n`\r\n\r\nexport interface CurrentUserResponse {\r\n    currentUser: { username: string };\r\n}\r\n\r\nexport const useCurrentUserQuery = (): QueryResult<CurrentUserResponse> => {\r\n    return useQuery<CurrentUserResponse>(CURRENT_USER_QUERY);\r\n\r\n}\r\n","import {MovieInfo} from \"../apiSchema\";\r\nimport {DisplayRow} from \"./types\";\r\nimport dayjs, {Dayjs} from \"dayjs\";\r\nimport {ChangeEvent, Dispatch, SetStateAction} from \"react\";\r\nimport {MAX_CHARACTERS} from \"./constants\";\r\n\r\n\r\nconst addLeadingZero = (n: number) => String(n).length <= 1 ? \"0\" + String(n) : String(n);\r\n\r\nconst getDurationString = (minutes: number) => `${Math.floor(minutes / 60)}:${addLeadingZero(minutes % 60)}`;\r\n\r\nconst formatDate = (date: Dayjs) => date.format('YYYY-MM-DD');\r\n\r\nconst mapMovieToDisplayRow = (movie: MovieInfo): DisplayRow => ({\r\n    id: movie.id,\r\n    name: movie.name,\r\n    releaseDate: dayjs(movie.releaseDate),\r\n    duration: getDurationString(movie.duration),\r\n    actors: movie.actors,\r\n    username: movie.username,\r\n    averageNote: movie.averageNote,\r\n});\r\n\r\nconst handleBasicTextField = (setValue: Dispatch<SetStateAction<string>>) =>\r\n    (event: ChangeEvent<HTMLInputElement>) => {\r\n        const value = event.target.value;\r\n        if (value.length < MAX_CHARACTERS) {\r\n            setValue(event.target.value);\r\n        }\r\n    };\r\n\r\n\r\nexport const utils = {\r\n    addLeadingZero,\r\n    getDurationString,\r\n    mapMovieToDisplayRow,\r\n    formatDate,\r\n    handleBasicTextField\r\n}\r\n","export const MAX_CHARACTERS = 100;\r\n","import {Rating} from \"@material-ui/lab\";\r\nimport React from \"react\";\r\n\r\nexport const RatingStarsView = (props: { value: number }) => (\r\n    <Rating\r\n        name=\"rating-read-only\"\r\n        value={props.value}\r\n        precision={.1}\r\n        readOnly\r\n    />\r\n)\r\n","import {Dispatch} from \"react\";\r\nimport {useCookies} from \"react-cookie\";\r\n\r\nconst SORTING_COLUMN = \"sortingColumn\";\r\nconst SORTING_DIRECTION = \"sortingDirection\";\r\n\r\nexport const useSorting = (): [string | undefined, string | undefined, (columnName: string, direction: string) => void, Dispatch<void>] => {\r\n    const [cookies, setCookie, removeCookie] = useCookies([SORTING_COLUMN, SORTING_DIRECTION]);\r\n    const setSorting = (columnName: string, direction: string) => {\r\n        setCookie(SORTING_COLUMN, columnName);\r\n        setCookie(SORTING_DIRECTION, direction)\r\n    };\r\n\r\n    const removeSorting = () => {\r\n        removeCookie(SORTING_COLUMN);\r\n        removeCookie(SORTING_DIRECTION)\r\n    };\r\n\r\n    return [cookies[SORTING_COLUMN], cookies[SORTING_DIRECTION], setSorting, removeSorting];\r\n};\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {\r\n    ColDef,\r\n    DataGrid,\r\n    SortDirection,\r\n    SortModel,\r\n    SortModelParams,\r\n    ValueFormatterParams\r\n} from '@material-ui/data-grid';\r\nimport styles from \"./MainDashboard.module.sass\";\r\nimport {makeStyles, useMediaQuery} from \"@material-ui/core\";\r\nimport {Link, useHistory} from \"react-router-dom\";\r\nimport {useGetAllMoviesQuery} from \"../../hooks/queries/useGetAllMoviesQuery\";\r\nimport {useCurrentUserQuery} from \"../../hooks/queries/useCurrentUserQuery\";\r\nimport {utils} from \"../../common/utils\";\r\nimport {RatingStarsView} from \"../RatingStars/RatingStarsView\";\r\nimport {useSorting} from \"../../hooks/useSorting\";\r\nimport dayjs from \"dayjs\";\r\n\r\n\r\nconst columns: ColDef[] = [\r\n    {\r\n        field: 'name',\r\n        headerName: 'Name',\r\n        width: 150\r\n    },\r\n    {\r\n        field: 'releaseDate',\r\n        headerName: 'Release Date',\r\n        width: 150,\r\n        type: 'date',\r\n        valueFormatter: params => utils.formatDate(dayjs(params.value as string))\r\n    },\r\n    {\r\n        field: 'duration',\r\n        headerName: 'Duration',\r\n        type: 'number',\r\n        width: 150,\r\n    },\r\n    {\r\n        field: 'actors',\r\n        headerName: 'Actors',\r\n        sortable: false,\r\n        width: 150,\r\n        cellClassName: 'actorsCellStyle',\r\n        renderCell: (params) => (\r\n            <div className={styles.actorsCell}>\r\n                {(params.value as string[]).join(\", \")}\r\n            </div>\r\n        )\r\n    },\r\n    {\r\n        field: 'averageNote',\r\n        headerName: 'Average Note',\r\n        renderCell: (params: ValueFormatterParams) => <RatingStarsView value={(Number(params.value))}/>,\r\n        sortable: true,\r\n        type: \"number\",\r\n        width: 150,\r\n    },\r\n];\r\n\r\nconst makeColumnsResponsive = (columns: ColDef[], bigScreen: boolean): ColDef[] => bigScreen ? columns.map(column => ({\r\n    ...column,\r\n    flex: 1,\r\n    cellClassName: 'cellStyle'\r\n})) : columns;\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        backgroundColor: \"white\",\r\n        '& .cellStyle': {\r\n            cursor: \"pointer\"\r\n        },\r\n        '& .actorsCellStyle': {\r\n            whiteSpace: \"pre-wrap\",\r\n            overflow: \"auto\"\r\n        }\r\n    }\r\n});\r\n\r\nconst MainDashboard = () => {\r\n    const classes = useStyles();\r\n    const {data, error} = useGetAllMoviesQuery();\r\n    const bigScreen = useMediaQuery('(min-width:60rem)');\r\n    const currentUser = useCurrentUserQuery();\r\n    const history = useHistory();\r\n    const [column, direction, setSorting, removeSorting] = useSorting();\r\n    const [sortModel, setSortModel] = useState<SortModel>([]);\r\n\r\n    useEffect(() => {\r\n        if (column && direction) {\r\n            setSortModel([{field: column as string, sort: direction as SortDirection}])\r\n        }\r\n    }, [column, direction])\r\n\r\n    const handleSortModelChange = (params: SortModelParams) => {\r\n        if (params.sortModel !== sortModel) {\r\n            setSortModel(params.sortModel);\r\n            const newSortModel = params.sortModel[0];\r\n            if (!newSortModel?.sort) {\r\n                removeSorting();\r\n            } else {\r\n                setSorting(newSortModel.field, newSortModel.sort)\r\n            }\r\n        }\r\n    };\r\n\r\n    if (error) {\r\n        return <p>Error :(</p>;\r\n    }\r\n\r\n\r\n    const renderSignInHint = () => currentUser.data?.currentUser.username ? null :\r\n        (<div className={styles.infoDialog}>\r\n            <Link to=\"/sign-in\">Sing In</Link> to share and rate movies!\r\n        </div>);\r\n\r\n    const displayMovie = (movieId: string) => {\r\n        history.push(\"/movies/\" + movieId);\r\n    }\r\n\r\n    return (\r\n        <div className={styles.dashboardContainer}>\r\n            <h1>Movie Library</h1>\r\n            <div>\r\n                {renderSignInHint()}\r\n            </div>\r\n            <div className={styles.dataGridContainer}>\r\n                <DataGrid rows={(data?.getAllMovies ?? []).map(movie => utils.mapMovieToDisplayRow(movie))}\r\n                          columns={makeColumnsResponsive(columns, bigScreen)}\r\n                          pageSize={10}\r\n                          onSelectionChange={param => displayMovie(String(param.rowIds[0]))}\r\n                          className={classes.root}\r\n                          sortModel={sortModel}\r\n                          onSortModelChange={handleSortModelChange}\r\n                          rowHeight={80}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MainDashboard;\r\n","import {useCookies} from \"react-cookie\";\r\nimport {Dispatch} from \"react\";\r\n\r\nconst TOKEN_NAME = \"authToken\";\r\n\r\nexport const useAuthToken = (): [string, Dispatch<string>, Dispatch<void>] => {\r\n    const [cookies, setCookie, removeCookie] = useCookies([TOKEN_NAME]);\r\n    const setAuthToken = (authToken: String) => setCookie(TOKEN_NAME, authToken);\r\n    const removeAuthToken = () => removeCookie(TOKEN_NAME);\r\n    return [cookies[TOKEN_NAME], setAuthToken, removeAuthToken];\r\n};\r\n","import gql from \"graphql-tag\";\r\nimport {FetchResult, MutationResult, useMutation} from \"@apollo/client\";\r\nimport {useAuthToken} from \"../useAuthToken\";\r\nimport {UserInfo} from \"../../apiSchema\";\r\n\r\nexport const loginMutationGQL = gql`\r\n    mutation login($username: String!, $password: String!) {\r\n        login( username: $username, password: $password ) {\r\n            token,\r\n            user {\r\n                id,\r\n                username\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\ninterface LoginInput {\r\n    username: string;\r\n    password: string;\r\n}\r\n\r\ninterface LoggedUser {\r\n    token: string;\r\n    user: UserInfo;\r\n}\r\n\r\n\r\nexport const useSignInMutation = (): [(username: string, password: string) => Promise<FetchResult>, MutationResult] => {\r\n    const [, setAuthToken, removeAuthToken] = useAuthToken();\r\n\r\n    const [mutation, mutationResults] = useMutation<{ login: LoggedUser }, LoginInput>(loginMutationGQL, {\r\n        onCompleted: (data) => {\r\n            setAuthToken(data.login.token);\r\n        },\r\n    });\r\n\r\n    const signIn = (username: string, password: string) => {\r\n        removeAuthToken();\r\n        return mutation({\r\n            variables: {\r\n                username,\r\n                password,\r\n            },\r\n        });\r\n    }\r\n    return [signIn, mutationResults]\r\n};\r\n","import styles from \"./ErrorMessage.module.sass\";\r\nimport * as React from \"react\";\r\n\r\ntype Props = {\r\n    errorMessages: string[];\r\n}\r\n\r\nexport const ErrorMessage = (props: Props) => (\r\n    <>\r\n        {props.errorMessages.map((message, index) =>\r\n            <div key={index} className={styles.errorMessage}>\r\n                {message}\r\n            </div>\r\n        )}\r\n    </>\r\n);\r\n","import * as React from \"react\";\r\nimport {useState} from \"react\";\r\nimport styles from './UserManagement.module.sass'\r\nimport {Button, TextField} from \"@material-ui/core\";\r\nimport {Link, useHistory} from \"react-router-dom\";\r\nimport {useSignInMutation} from \"../../hooks/mutations/useSignInMutation\";\r\nimport {ErrorMessage} from \"../ErrorMessage/ErrorMessage\";\r\nimport {utils} from \"../../common/utils\";\r\n\r\nexport const SignIn = () => {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [errorMessages, setErrorMessages] = useState<string[]>([]);\r\n    const history = useHistory();\r\n    const [signInMutation] = useSignInMutation();\r\n\r\n\r\n    const submitSignIn = () => {\r\n        const errors = [];\r\n        if (username.length < 3) {\r\n            errors.push(\"Username should be at least 3 characters long.\");\r\n        }\r\n        if (password.length < 3) {\r\n            errors.push(\"Password should be at least 3 characters long.\");\r\n        }\r\n\r\n        if (errors.length > 0) {\r\n            setErrorMessages(errors);\r\n        } else {\r\n            signInMutation(username, password)\r\n                .then(() => history.push(\"/\"))\r\n                .catch((error) => setErrorMessages([error.message]));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={styles.mainContainer}>\r\n            <div className={styles.formContainer}>\r\n                <div className={styles.registerHint}>Don't have account yet? <Link to=\"/register\">Register</Link>.</div>\r\n                <h1>Sign in</h1>\r\n                <ErrorMessage errorMessages={errorMessages}/>\r\n                <div className={styles.formItem}>\r\n                    <TextField id=\"username\" label=\"Username\" value={username}\r\n                               onChange={utils.handleBasicTextField(setUsername)}/>\r\n                </div>\r\n                <div className={styles.formItem}>\r\n                    <TextField id=\"password\"\r\n                               label=\"Password\"\r\n                               type=\"password\"\r\n                               value={password}\r\n                               onChange={utils.handleBasicTextField(setPassword)}/>\r\n                </div>\r\n                <div className={styles.formItem}>\r\n                    <Button variant=\"outlined\" color=\"primary\" onClick={submitSignIn}>\r\n                        Sign In\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </div>);\r\n};\r\n","import gql from \"graphql-tag\";\r\nimport {FetchResult, MutationResult, useMutation} from \"@apollo/client\";\r\nimport {UserInfo} from \"../../apiSchema\";\r\n\r\nexport const registerMutationGQL = gql`\r\n    mutation register($username: String!, $password: String!) {\r\n        register( username: $username, password: $password ) {\r\n            id,\r\n            username\r\n        }\r\n    }\r\n`;\r\n\r\ninterface RegisterInput {\r\n    username: string;\r\n    password: string;\r\n}\r\n\r\nexport const useRegisterMutation = (): [(username: string, password: string) => Promise<FetchResult>, MutationResult] => {\r\n\r\n    const [mutation, mutationResults] = useMutation<{ register: UserInfo }, RegisterInput>(registerMutationGQL);\r\n\r\n    const register = (username: string, password: string) => {\r\n        return mutation({\r\n            variables: {\r\n                username,\r\n                password,\r\n            },\r\n        });\r\n    }\r\n    return [register, mutationResults]\r\n};\r\n","import * as React from \"react\";\r\nimport {useState} from \"react\";\r\nimport styles from './UserManagement.module.sass'\r\nimport {Button, TextField} from \"@material-ui/core\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {useRegisterMutation} from \"../../hooks/mutations/useRegisterMutation\";\r\nimport {useSignInMutation} from \"../../hooks/mutations/useSignInMutation\";\r\nimport {ErrorMessage} from \"../ErrorMessage/ErrorMessage\";\r\nimport {utils} from \"../../common/utils\";\r\n\r\nconst Register = () => {\r\n    const [username, setUsername] = React.useState('');\r\n    const [password, setPassword] = React.useState('');\r\n    const [passwordConfirm, setPasswordConfirm] = React.useState('');\r\n    const [register] = useRegisterMutation();\r\n    const [signInMutation] = useSignInMutation();\r\n    const [errorMessages, setErrorMessages] = useState<string[]>([]);\r\n    const history = useHistory();\r\n\r\n    const submitRegister = () => {\r\n        const errors = [];\r\n        if (username.length < 3) {\r\n            errors.push(\"Username should be at least 3 characters long.\");\r\n        }\r\n\r\n        if (password.length < 3) {\r\n            errors.push(\"Password should be at least 3 characters long.\");\r\n        }\r\n\r\n        if (password !== passwordConfirm) {\r\n            errors.push(\"Passwords are not equal\");\r\n        }\r\n        if (errors.length > 0) {\r\n            setErrorMessages(errors);\r\n        } else {\r\n            register(username, password)\r\n                .then(() => {\r\n                    signInMutation(username, password)\r\n                        .then(() => history.push(\"/\"))\r\n                        .catch((error) => setErrorMessages([error.message]));\r\n                })\r\n                .catch((error) => setErrorMessages([error.message]));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.mainContainer}>\r\n            <div className={styles.formContainer}>\r\n                <h1>Register</h1>\r\n                <ErrorMessage errorMessages={errorMessages}/>\r\n                <div className={styles.formItem}>\r\n                    <TextField id=\"username\" label=\"Username\" value={username}\r\n                               onChange={utils.handleBasicTextField(setUsername)}/>\r\n                </div>\r\n                <div className={styles.formItem}>\r\n                    <TextField id=\"password\" label=\"Password\" type=\"password\"\r\n                               value={password}\r\n                               onChange={utils.handleBasicTextField(setPassword)}/>\r\n                </div>\r\n                <div className={styles.formItem}>\r\n                    <TextField id=\"passwordConfirm\" label=\"Password Confirm\" type=\"password\"\r\n                               value={passwordConfirm}\r\n                               onChange={utils.handleBasicTextField(setPasswordConfirm)}/>\r\n                </div>\r\n                <div className={styles.formItem}>\r\n                    <Button variant=\"outlined\" color=\"primary\" onClick={submitRegister}>\r\n                        Register\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </div>);\r\n};\r\n\r\nexport default Register;\r\n","import React from \"react\";\r\nimport styles from \"./ClientFaultPage.module.sass\";\r\n\r\ntype Props = {\r\n    text: string;\r\n}\r\nconst ClientFaultPage = (props: Props) => (\r\n    <div className={styles.container}>\r\n        <h1>{props.text}</h1>\r\n    </div>\r\n);\r\nexport default ClientFaultPage;\r\n","import {ApolloClient, ApolloLink, HttpLink, InMemoryCache, NormalizedCacheObject, split} from \"@apollo/client\";\r\nimport {useAuthToken} from \"./useAuthToken\";\r\nimport {WebSocketLink} from \"@apollo/client/link/ws\";\r\nimport {getMainDefinition} from \"@apollo/client/utilities\";\r\n\r\nconst httpLink = new HttpLink({uri: 'http://localhost:3000/v1/graphql'});\r\n\r\nconst wsLink = (authToken: string) => new WebSocketLink({\r\n    uri: 'ws://localhost:3000/graphql',\r\n    options: {\r\n        reconnect: true\r\n    },\r\n    connectionParams: {\r\n        authToken: authToken,\r\n    }\r\n});\r\n\r\nconst mainLink = (authToken: string) => split(\r\n    ({query}) => {\r\n        const definition = getMainDefinition(query)\r\n        return definition.kind === 'OperationDefinition' && definition.operation === 'subscription'\r\n    },\r\n    wsLink(authToken),\r\n    authMiddleware(authToken).concat(httpLink)\r\n)\r\n\r\nconst authMiddleware = (authToken: string) =>\r\n    new ApolloLink((operation, forward) => {\r\n        // add the authorization to the headers\r\n        if (authToken) {\r\n            operation.setContext({\r\n                headers: {\r\n                    authorization: `Bearer ${authToken}`,\r\n                },\r\n            });\r\n        }\r\n\r\n        return forward(operation);\r\n    });\r\n\r\nconst cache = new InMemoryCache({\r\n    typePolicies: {\r\n        Movie: {\r\n            fields: {\r\n                actors: {\r\n                    merge(existing, incoming) {\r\n                        return incoming\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nexport const useAppApolloClient = (): ApolloClient<NormalizedCacheObject> => {\r\n    const [authToken] = useAuthToken();\r\n    return new ApolloClient({\r\n        link: mainLink(authToken),\r\n        cache,\r\n    });\r\n};\r\n","import React from \"react\";\r\nimport {AppBar, Button, createStyles, makeStyles, Theme, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {useCurrentUserQuery} from \"../../hooks/queries/useCurrentUserQuery\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {useLogout} from \"../../hooks/useLogOut\";\r\nimport styles from \"./Header.module.sass\"\r\nimport HomeIcon from '@material-ui/icons/Home';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        space: {\r\n            flexGrow: 1,\r\n        },\r\n        header: {\r\n            backgroundColor: \"#7dc7cb\",\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        }\r\n    }),\r\n);\r\n\r\nconst Header = () => {\r\n    const classes = useStyles();\r\n    const currentUser = useCurrentUserQuery();\r\n    const logout = useLogout();\r\n    const history = useHistory();\r\n\r\n    const goToHomeView = () => history.push(\"/\");\r\n    const goToSignInView = () => history.push(\"/sign-in\");\r\n    const goToRegisterView = () => history.push(\"/register\");\r\n    const goToAddMovieView = () => history.push(\"/add-movie\")\r\n\r\n    const renderUserName = () => currentUser.data ? (\r\n        <div className={styles.currentUsername}>\r\n            <Typography variant=\"h6\">\r\n                {currentUser.data.currentUser.username}\r\n            </Typography>\r\n        </div>\r\n    ) : null\r\n\r\n    const renderSignInButton = () => currentUser.data ? null :\r\n        (<Button color=\"inherit\" onClick={goToSignInView}>\r\n            Sing In\r\n        </Button>);\r\n\r\n    const renderRegisterButton = () => currentUser.data ? null :\r\n        (<Button color=\"inherit\" onClick={goToRegisterView}>\r\n            Register\r\n        </Button>);\r\n\r\n    const logoutAndReturn = () => {\r\n        logout();\r\n        history.push(\"/\");\r\n    }\r\n\r\n    const renderLogoutButton = () => currentUser.data ? (\r\n        <Button color=\"inherit\" onClick={logoutAndReturn}>\r\n            Log out\r\n        </Button>) : null;\r\n\r\n    const renderAddMovieButton = () => currentUser.data ? (\r\n        <Button color=\"inherit\" onClick={goToAddMovieView}>\r\n            Add movie\r\n        </Button>\r\n    ) : null;\r\n\r\n    return (\r\n        <AppBar position=\"static\" className={classes.header}>\r\n            <Toolbar>\r\n                <div className={styles.homeButton}>\r\n                    <HomeIcon onClick={goToHomeView}/>\r\n                </div>\r\n                <div className={classes.space}/>\r\n                {renderUserName()}\r\n                {renderSignInButton()}\r\n                {renderRegisterButton()}\r\n                {renderAddMovieButton()}\r\n                {renderLogoutButton()}\r\n            </Toolbar>\r\n        </AppBar>)\r\n\r\n};\r\n\r\nexport default Header;\r\n","import {useAuthToken} from \"./useAuthToken\";\r\nimport {useApolloClient} from \"@apollo/client\";\r\n\r\nexport const useLogout = () => {\r\n    const [, , removeAuthToken] = useAuthToken();\r\n    const apolloClient = useApolloClient();\r\n\r\n    return async () => {\r\n        await apolloClient.clearStore(); // we remove all information in the store\r\n        removeAuthToken(); //we clear the authToken\r\n    };\r\n};\r\n","import gql from \"graphql-tag\";\r\nimport {FetchResult, MutationResult, useMutation} from \"@apollo/client\";\r\nimport {MovieInfo} from \"../../apiSchema\";\r\nimport {Dayjs} from \"dayjs\";\r\nimport {utils} from \"../../common/utils\";\r\n\r\nexport const addMovieMutationGQL = gql`\r\n    mutation addMovie($input: AddMovieInput!) {\r\n        addMovie(input: $input) {\r\n            id,\r\n            name,\r\n            releaseDate,\r\n            duration,\r\n            username,\r\n            actors,\r\n            averageNote\r\n            ratings {\r\n                username,\r\n                note,\r\n                comment\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\ninterface AddMovieInput {\r\n    name: string;\r\n    releaseDate: string;\r\n    duration: number;\r\n    actors: string[];\r\n}\r\n\r\nexport const useAddMovieMutation = (): [(name: string, releaseDate: Dayjs, duration: number, actors: string[])\r\n    => Promise<FetchResult>, MutationResult] => {\r\n\r\n    const [mutation, mutationResults] = useMutation<{ addMovie: MovieInfo }, { input: AddMovieInput }>(addMovieMutationGQL, {\r\n        update(cache, mutationResult) {\r\n            cache.modify({\r\n                fields: {\r\n                    getAllMovies(existingMovies: MovieInfo[] = []) {\r\n                        const newMovieRef = cache.writeFragment({\r\n                            data: mutationResult.data?.addMovie,\r\n                            fragment: gql`\r\n                                fragment NewMovie on Movie {\r\n                                    id,\r\n                                    name,\r\n                                    releaseDate,\r\n                                    duration,\r\n                                    actors,\r\n                                    username,\r\n                                    averageNote,\r\n                                    ratings {\r\n                                        username,\r\n                                        note,\r\n                                        comment\r\n                                    },\r\n                                }\r\n                            `\r\n                        })\r\n                        return [...existingMovies, newMovieRef]\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    });\r\n\r\n    const addMovie = (name: string, releaseDate: Dayjs, duration: number, actors: string[]) => {\r\n        return mutation({\r\n            variables: {\r\n                input: {\r\n                    name,\r\n                    releaseDate: utils.formatDate(releaseDate),\r\n                    duration,\r\n                    actors\r\n                }\r\n            },\r\n        });\r\n    }\r\n    return [addMovie, mutationResults]\r\n};\r\n","import {InputLabel, TextField} from \"@material-ui/core\";\r\nimport React, {ChangeEvent, Dispatch, useState} from \"react\";\r\nimport styles from \"./DurationInput.module.sass\";\r\n\r\nconst MINUTES_IN_HOUR = 60;\r\n\r\ntype Props = {\r\n    duration: number; // time in minutes\r\n    setDuration: Dispatch<number>;\r\n}\r\n\r\nconst getHours = (value: number) => Math.floor(value / MINUTES_IN_HOUR);\r\n\r\nconst getMinutes = (value: number) => value % MINUTES_IN_HOUR;\r\n\r\nconst getDurationValue = (hours: number, minutes: number): number => hours * MINUTES_IN_HOUR + minutes;\r\n\r\n\r\nexport const DurationInput = React.memo((props: Props) => {\r\n\r\n    const [durationHours, setDurationHours] = useState<number>(getHours(props.duration));\r\n    const [durationMinutes, setDurationMinutes] = useState<number>(getMinutes(props.duration));\r\n\r\n\r\n    const handleDurationHoursChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const value = Number(event.target.value);\r\n        if (value >= 0) {\r\n            setDurationHours(value);\r\n            props.setDuration(getDurationValue(value, durationMinutes))\r\n        }\r\n    };\r\n\r\n    const handleDurationMinutesChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        const value = Number(event.target.value)\r\n        if (value >= MINUTES_IN_HOUR) {\r\n            const hours = durationHours + getHours(value);\r\n            const minutes = getMinutes(value);\r\n            setDurationHours(hours);\r\n            setDurationMinutes(minutes);\r\n            props.setDuration(getDurationValue(hours, minutes))\r\n        } else if (value >= 0) {\r\n            setDurationMinutes(value);\r\n            props.setDuration(getDurationValue(durationHours, value))\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <InputLabel>Duration</InputLabel>\r\n            </div>\r\n            <div className={styles.durationInput}>\r\n                <TextField\r\n                    id=\"filled-number\"\r\n                    label=\"Hours\"\r\n                    type=\"number\"\r\n                    value={durationHours}\r\n                    onChange={handleDurationHoursChange}\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                    variant=\"filled\"\r\n                />\r\n                <TextField\r\n                    id=\"filled-number\"\r\n                    label=\"Minutes\"\r\n                    type=\"number\"\r\n                    value={durationMinutes}\r\n                    onChange={handleDurationMinutesChange}\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                    variant=\"filled\"\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n});\r\n","import {Chip, Fab, InputLabel, TextField, Tooltip} from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport React, {ChangeEvent, Dispatch, memo, SetStateAction, useState} from \"react\";\r\nimport styles from \"./ActorsInput.module.sass\";\r\n\r\ntype Props = {\r\n    actors: string[];\r\n    setActors: Dispatch<SetStateAction<string[]>>;\r\n}\r\n\r\nexport const ActorsInput = memo((props: Props) => {\r\n    const [newActor, setNewActor] = useState<string>('');\r\n\r\n    const deleteActor = (actorToDelete: string) => {\r\n        props.setActors(actors => actors.filter(actor => actor !== actorToDelete));\r\n    }\r\n\r\n    const handleAddingNewActor = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setNewActor(event.target.value);\r\n    };\r\n\r\n    const addNewActor = () => {\r\n        if (newActor.length > 0) {\r\n            if (!props.actors.includes(newActor)) {\r\n                props.setActors(actors => actors.concat(newActor));\r\n            }\r\n            setNewActor('');\r\n        }\r\n    }\r\n\r\n    const renderActors = () => props.actors.map(actor =>\r\n        <div className={styles.chipWrapper} key={actor}>\r\n            <Chip\r\n                label={actor}\r\n                onDelete={() => deleteActor(actor)}\r\n            />\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <InputLabel>Actors</InputLabel>\r\n            </div>\r\n            <div className={styles.chipContainer}>\r\n                {renderActors()}\r\n            </div>\r\n            <div>\r\n                <TextField\r\n                    id=\"newActor\"\r\n                    value={newActor}\r\n                    onChange={handleAddingNewActor}\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                />\r\n                <div className={styles.addTooltip}>\r\n                    <Tooltip title=\"Add\" aria-label=\"add\" onClick={addNewActor}>\r\n                        <Fab color=\"default\">\r\n                            <AddIcon/>\r\n                        </Fab>\r\n                    </Tooltip>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n});\r\n","import React, {ChangeEvent, Dispatch, SetStateAction} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport dayjs, {Dayjs} from \"dayjs\";\r\nimport {utils} from \"../../common/utils\";\r\n\r\ntype Props = {\r\n    date: Dayjs;\r\n    setDate: Dispatch<SetStateAction<Dayjs>>;\r\n}\r\n\r\nexport const ReleaseDateInput = (props: Props) => {\r\n\r\n    const handleDateChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        props.setDate(dayjs(event.target.value));\r\n    };\r\n\r\n    return (\r\n        <TextField\r\n            id=\"date\"\r\n            label=\"Release Date\"\r\n            type=\"date\"\r\n            value={utils.formatDate(props.date)}\r\n            onChange={handleDateChange}\r\n            InputLabelProps={{\r\n                shrink: true,\r\n            }}\r\n        />\r\n    );\r\n};\r\n","import React, {Dispatch, SetStateAction} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\nimport {utils} from \"../../common/utils\";\r\n\r\ntype Props = {\r\n    name: string;\r\n    setName: Dispatch<SetStateAction<string>>;\r\n}\r\n\r\nexport const MovieNameInput = (props: Props) => (\r\n    <TextField id=\"name\"\r\n               label=\"Name\"\r\n               value={props.name}\r\n               onChange={utils.handleBasicTextField(props.setName)}/>);\r\n\r\n","import React, {useCallback, useState} from \"react\";\r\nimport styles from './MovieInput.module.sass'\r\nimport {Button} from \"@material-ui/core\";\r\nimport {useAddMovieMutation} from \"../../hooks/mutations/useAddMovieMutation\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {DurationInput} from \"../Input/DurationInput/DurationInput\";\r\nimport {ActorsInput} from \"../Input/ActorsInput/ActorsInput\";\r\nimport {ReleaseDateInput} from \"../Input/ReleaseDateInput\";\r\nimport {MovieNameInput} from \"../Input/MovieNameInput\";\r\nimport dayjs, {Dayjs} from \"dayjs\";\r\nimport {ErrorMessage} from \"../ErrorMessage/ErrorMessage\";\r\n\r\nexport const AddMovie = () => {\r\n    const [name, setName] = useState('');\r\n    const [date, setDate] = useState<Dayjs>(dayjs());\r\n    const [duration, setDuration] = useState<number>(90);\r\n    const [actors, setActors] = useState<string[]>([]);\r\n    const [errorMessages, setErrorMessages] = useState<string[]>([]);\r\n    const [addMovie] = useAddMovieMutation();\r\n    const history = useHistory();\r\n\r\n    const handleActors = useCallback((actors) => setActors(actors), []);\r\n    const handleDuration = useCallback((duration) => setDuration(duration), []);\r\n\r\n    const addNewMovie = () => {\r\n        const errors = [];\r\n        if (name.length === 0) {\r\n            errors.push(\"Movie name should not be empty.\");\r\n        }\r\n        if (duration <= 0) {\r\n            errors.push(\"Movie duration should be positive.\");\r\n        }\r\n        if(!date.isValid()) {\r\n            errors.push(\"Movie release date is not correct.\");\r\n        }\r\n        if (errors.length > 0) {\r\n            setErrorMessages(errors);\r\n        } else {\r\n            addMovie(name, date, duration, actors).then(() => {\r\n                history.push(\"/\");\r\n            }).catch((error) => setErrorMessages([error.message]));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.mainContainer}>\r\n            <div className={styles.formContainer}>\r\n                <h1>Add new movie</h1>\r\n                <ErrorMessage errorMessages={errorMessages}/>\r\n                <div className={styles.formItem}>\r\n                    <MovieNameInput name={name} setName={setName}/>\r\n                </div>\r\n                <div className={styles.formItem}>\r\n                    <ReleaseDateInput date={date} setDate={setDate}/>\r\n                </div>\r\n                <div className={styles.formItem}>\r\n                    <div>\r\n                        <DurationInput duration={duration} setDuration={handleDuration}/>\r\n                    </div>\r\n                </div>\r\n                <div className={styles.formItem}>\r\n                    <ActorsInput actors={actors} setActors={handleActors}/>\r\n                </div>\r\n                <div className={styles.formItem}>\r\n                    <Button variant=\"outlined\" color=\"primary\" onClick={addNewMovie}>\r\n                        Add New Movie\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </div>);\r\n};\r\n\r\nexport default AddMovie;\r\n","import {gql, useQuery} from \"@apollo/client\";\r\nimport {MovieInfo} from \"../../apiSchema\";\r\n\r\nconst GET_ITEM = gql`\r\n    query GetMovie($movieId: String!) {\r\n        getMovie(movieId: $movieId) {\r\n            id,\r\n            name,\r\n            releaseDate,\r\n            duration,\r\n            actors,\r\n            username,\r\n            averageNote,\r\n            ratings {\r\n                username,\r\n                note,\r\n                comment\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst RATINGS_SUBSCRIPTION = gql`\r\n    subscription OnRatingAdded($movieId: String!) {\r\n        ratingAdded(movieId: $movieId){\r\n            comment,\r\n            username,\r\n            note\r\n        }\r\n    }\r\n`;\r\n\r\nexport interface GetMovieResponse {\r\n    getMovie?: MovieInfo;\r\n}\r\n\r\n\r\nexport const useGetMovieQuery = (movieId: string): [boolean, GetMovieResponse | undefined, any] => {\r\n    const {loading, data, subscribeToMore} = useQuery(GET_ITEM, {\r\n        variables: {\r\n            movieId: movieId\r\n        }\r\n    });\r\n\r\n    const subscribeToNewRatings = () =>\r\n        subscribeToMore({\r\n            document: RATINGS_SUBSCRIPTION,\r\n            variables: {movieId: movieId},\r\n            updateQuery: (prev, {subscriptionData}) => {\r\n                if (!subscriptionData.data) return prev;\r\n                const newRatingItem = subscriptionData.data.ratingAdded;\r\n                return {\r\n                    getMovie: {\r\n                        ...prev.getMovie,\r\n                        averageNote: newRatingItem.averageNote,\r\n                        ratings: [...(prev?.getMovie?.ratings || []), {...newRatingItem}]\r\n                    }\r\n                };\r\n            }\r\n        });\r\n\r\n    return [loading, data, subscribeToNewRatings];\r\n}\r\n","import {FetchResult, gql, MutationResult, useMutation} from \"@apollo/client\";\r\nimport {MovieInfo} from \"../../apiSchema\";\r\n\r\nexport const rateMovieMutationGQL = gql`\r\n    mutation addMovie($movieId: String! $note: Int!, $comment: String) {\r\n        rateMovie(movieId: $movieId, note: $note, comment: $comment) {\r\n            id,\r\n            averageNote,\r\n            ratings {\r\n                username,\r\n                note,\r\n                comment\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\ninterface RateInput {\r\n    movieId: string;\r\n    note: number;\r\n    comment: string;\r\n}\r\n\r\nexport const useRateMovieMutation = ():  [(movieId: string, note: number, comment: string)\r\n    => Promise<FetchResult>, MutationResult] => {\r\n    const [mutation, mutationResults] = useMutation<{ rateMovie: MovieInfo }, RateInput>(rateMovieMutationGQL);\r\n\r\n    const rateMovie = (movieId: string, note: number, comment: string) => {\r\n        return mutation({\r\n            variables: {\r\n                movieId,\r\n                note,\r\n                comment\r\n            }\r\n        })\r\n    }\r\n    return [rateMovie, mutationResults];\r\n}\r\n","import gql from \"graphql-tag\";\r\nimport {FetchResult, MutationResult, useMutation} from \"@apollo/client\";\r\nimport {MovieInfo} from \"../../apiSchema\";\r\nimport {GET_ALL_ITEMS} from \"../queries/useGetAllMoviesQuery\";\r\n\r\nexport const removeMovieMutationGQL = gql`\r\n    mutation removeMovie($movieId: String!) {\r\n        removeMovie(movieId: $movieId) {\r\n            id\r\n        }\r\n    }\r\n`;\r\n\r\ninterface MovieDeletionInfo {\r\n    id: string;\r\n}\r\n\r\nexport const useDeleteMovieMutation = (): [(movieId: string) => Promise<FetchResult<any>>, MutationResult] => {\r\n\r\n    const [mutation, mutationResults] = useMutation<{ removeMovie: MovieDeletionInfo }, { movieId: string }>(removeMovieMutationGQL, {\r\n        update(cache, mutationResult) {\r\n            const data: { getAllMovies: MovieInfo[] } | null = cache.readQuery({\r\n                query: GET_ALL_ITEMS\r\n            });\r\n            const filteredMovies = (data?.getAllMovies ?? []).filter(movie => movie.id !== mutationResult.data?.removeMovie.id);\r\n            cache.modify({\r\n                fields: {\r\n                    getAllMovies(existingMovies: MovieInfo[] = []) {\r\n                        return filteredMovies\r\n                    }\r\n                }\r\n            })\r\n        }\r\n\r\n    });\r\n\r\n    const deleteMovie = (movieId: string) => {\r\n        return mutation({\r\n            variables: {\r\n                movieId\r\n            },\r\n        });\r\n    }\r\n    return [deleteMovie, mutationResults]\r\n};\r\n","import {useGetMovieQuery} from \"../../hooks/queries/useGetMovieQuery\";\r\nimport ClientFaultPage from \"../ClientFaultPage/ClientFaultPage\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport styles from \"./MovieDisplay.module.sass\";\r\nimport {utils} from \"../../common/utils\";\r\nimport {RatingStarsView} from \"../RatingStars/RatingStarsView\";\r\nimport {RatingInfo} from \"../../apiSchema\";\r\nimport {Button, TextField} from \"@material-ui/core\";\r\nimport {Rating} from \"@material-ui/lab\";\r\nimport {useRateMovieMutation} from \"../../hooks/mutations/useRateMovieMutation\";\r\nimport {useCurrentUserQuery} from \"../../hooks/queries/useCurrentUserQuery\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {useDeleteMovieMutation} from \"../../hooks/mutations/useDeleteMovieMutation\";\r\nimport dayjs from \"dayjs\";\r\n\r\ntype Props = {\r\n    selectedMovieId: string;\r\n}\r\nconst MovieDisplay = (props: Props) => {\r\n    const [loading, data, subscribeToNewRatings] = useGetMovieQuery(props.selectedMovieId);\r\n    const [comment, setComment] = useState<string>('')\r\n    const [note, setNote] = useState<number | null>(2);\r\n    const [rateMovie] = useRateMovieMutation();\r\n    const [deleteMovie] = useDeleteMovieMutation();\r\n    const currentUser = useCurrentUserQuery();\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = subscribeToNewRatings();\r\n        return () => unsubscribe();\r\n    }, [currentUser]);\r\n\r\n    if (!data?.getMovie && !loading) {\r\n        return <ClientFaultPage text=\"404 Not found\"/>\r\n    }\r\n\r\n    const movieDisplayable = data?.getMovie ? utils.mapMovieToDisplayRow(data?.getMovie) : null;\r\n\r\n    const renderRating = (ratingInfo: RatingInfo) =>\r\n        <div key={ratingInfo.username}>\r\n            <div>\r\n                <h6>{ratingInfo.username}</h6>\r\n            </div>\r\n            <div>\r\n                <RatingStarsView value={ratingInfo.note}/>\r\n            </div>\r\n            <div>{ratingInfo.comment}</div>\r\n        </div>\r\n\r\n    const rateMovieSubmit = () => {\r\n        rateMovie(movieDisplayable?.id ?? '', Number(note), comment)\r\n            .catch(error => console.error(error.message));\r\n    }\r\n\r\n    const editMovie = () => {\r\n        history.push(\"/edit-movie/\" + movieDisplayable?.id)\r\n    }\r\n\r\n    const handleMovieDelete = () => {\r\n        deleteMovie(movieDisplayable?.id ?? '')\r\n            .then(() => history.push(\"/\"))\r\n            .catch(error => console.error(error.message));\r\n\r\n    }\r\n\r\n\r\n    const renderRateInput = () => {\r\n        const movieAlreadyRated = (data?.getMovie?.ratings ?? [])\r\n            .filter(rating => rating.username === currentUser.data?.currentUser.username).length > 0\r\n\r\n        if (movieAlreadyRated || !currentUser.data) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div className={styles.rateInput}>\r\n                <h5>Add your rating:</h5>\r\n                <div className={styles.inputFormItem}>\r\n                    <Rating\r\n                        name=\"userNote\"\r\n                        value={note}\r\n                        precision={1}\r\n                        onChange={(event, newValue) => {\r\n                            setNote(newValue);\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div className={styles.inputFormItem}>\r\n                    <TextField\r\n                        id=\"comment-input\"\r\n                        label=\"Comment\"\r\n                        multiline\r\n                        rowsMax={4}\r\n                        value={comment}\r\n                        onChange={event => setComment(event.target.value)}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Button variant=\"outlined\" color=\"primary\" size=\"medium\" onClick={rateMovieSubmit}>\r\n                        Rate\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const renderEditButton = () => (\r\n        currentUser.data ? (\r\n            <div className={styles.actionButton}>\r\n                <Button variant=\"outlined\" color=\"default\" size=\"small\" onClick={editMovie}>\r\n                    Edit\r\n                </Button>\r\n            </div>) : null\r\n    );\r\n    const renderDeleteButton = () =>\r\n        currentUser.data ? (\r\n            <div className={styles.actionButton}>\r\n                <Button variant=\"outlined\" color=\"secondary\" size=\"small\" onClick={handleMovieDelete}>\r\n                    Delete\r\n                </Button>\r\n            </div>) : null;\r\n\r\n\r\n    return (\r\n        <div className={styles.mainContainer}>\r\n            <h2>Movie Details</h2>\r\n            <div className={styles.detailsContainer}>\r\n                <div className={styles.detailsInfoContainer}>\r\n                    <div><b>Name</b></div>\r\n                    <div>{movieDisplayable?.name}</div>\r\n                    <div><b>Release Date</b></div>\r\n                    <div>{movieDisplayable?.releaseDate ? utils.formatDate(dayjs(movieDisplayable?.releaseDate)) : ''}</div>\r\n                    <div><b>Duration</b></div>\r\n                    <div>{movieDisplayable?.duration}</div>\r\n                    <div><b>Actors</b></div>\r\n                    <div>{movieDisplayable?.actors.join(\", \")}</div>\r\n                    <div><b>Created by</b></div>\r\n                    <div>{movieDisplayable?.username}</div>\r\n                    <div><b>Average Note</b></div>\r\n                    <div>\r\n                        <RatingStarsView value={movieDisplayable?.averageNote ?? 0}/>\r\n                    </div>\r\n                </div>\r\n                <div className={styles.actionButtons}>\r\n                    {renderEditButton()}\r\n                    {renderDeleteButton()}\r\n                </div>\r\n            </div>\r\n            <h3>Comments</h3>\r\n            {renderRateInput()}\r\n            <div className={styles.comments}>\r\n                {(data?.getMovie?.ratings || []).map(rating => renderRating(rating))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default MovieDisplay;\r\n","import gql from \"graphql-tag\";\r\nimport {FetchResult, MutationResult, useMutation} from \"@apollo/client\";\r\nimport {MovieInfo} from \"../../apiSchema\";\r\nimport {Dayjs} from \"dayjs\";\r\nimport {utils} from \"../../common/utils\";\r\n\r\nexport const editMovieMutationGQL = gql`\r\n    mutation editMovie($input: EditMovieInput!) {\r\n        editMovie(input: $input) {\r\n            id,\r\n            name,\r\n            releaseDate,\r\n            duration,\r\n            username,\r\n            actors,\r\n            averageNote\r\n            ratings {\r\n                username,\r\n                note,\r\n                comment\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\ninterface EditMovieInput {\r\n    movieId: string;\r\n    name: string;\r\n    releaseDate: string;\r\n    duration: number;\r\n    actors: string[];\r\n}\r\n\r\nexport const useEditMovieMutation = (): [(movieId: string, name: string, releaseDate: Dayjs, duration: number, actors: string[])\r\n    => Promise<FetchResult>, MutationResult] => {\r\n\r\n    const [mutation, mutationResults] = useMutation<{ editMovie: MovieInfo }, { input: EditMovieInput }>(editMovieMutationGQL);\r\n\r\n    const editMovie = (movieId: string, name: string, releaseDate: Dayjs, duration: number, actors: string[]) => {\r\n        return mutation({\r\n            variables: {\r\n                input: {\r\n                    movieId,\r\n                    name,\r\n                    releaseDate:  utils.formatDate(releaseDate),\r\n                    duration,\r\n                    actors\r\n                }\r\n            },\r\n        });\r\n    }\r\n    return [editMovie, mutationResults]\r\n};\r\n","import React, {useCallback, useEffect, useState} from \"react\";\r\nimport styles from './MovieInput.module.sass'\r\nimport {Button} from \"@material-ui/core\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {DurationInput} from \"../Input/DurationInput/DurationInput\";\r\nimport {ActorsInput} from \"../Input/ActorsInput/ActorsInput\";\r\nimport {ReleaseDateInput} from \"../Input/ReleaseDateInput\";\r\nimport {MovieNameInput} from \"../Input/MovieNameInput\";\r\nimport {useEditMovieMutation} from \"../../hooks/mutations/useEditMovieMutation\";\r\nimport {useGetMovieQuery} from \"../../hooks/queries/useGetMovieQuery\";\r\nimport dayjs, {Dayjs} from \"dayjs\";\r\nimport {ErrorMessage} from \"../ErrorMessage/ErrorMessage\";\r\n\r\ntype Props = {\r\n    selectedMovieId: string;\r\n}\r\n\r\nexport const EditMovie = (props: Props) => {\r\n    const [, data] = useGetMovieQuery(props.selectedMovieId);\r\n    const isDataDefined = data === undefined;\r\n\r\n    const [name, setName] = useState<string>('');\r\n    const [date, setDate] = useState<Dayjs>(dayjs());\r\n    const [duration, setDuration] = useState<number | undefined>();\r\n    const [actors, setActors] = useState<string[]>([]);\r\n    const [editMovie] = useEditMovieMutation();\r\n    const history = useHistory();\r\n    const [errorMessages, setErrorMessages] = useState<string[]>([]);\r\n    const handleActors = useCallback((actors) => setActors(actors), []);\r\n    const handleDuration = useCallback((duration) => setDuration(duration), []);\r\n\r\n    useEffect(() => {\r\n        const movie = data?.getMovie;\r\n        if (movie && !isDataDefined) {\r\n            setName(movie.name);\r\n            setDuration(movie.duration);\r\n            setDate(dayjs(movie.releaseDate));\r\n            setActors(movie.actors);\r\n        }\r\n    }, [data?.getMovie, isDataDefined]);\r\n\r\n    const backToMovieDetails = () =>\r\n        history.push(\"/movies/\" + data?.getMovie?.id);\r\n\r\n    const handleMovieEdit = () => {\r\n        const errors = [];\r\n        if (name.length === 0) {\r\n            errors.push(\"Movie name should not be empty.\");\r\n        }\r\n        if (!duration || duration <= 0) {\r\n            errors.push(\"Movie duration should be positive.\");\r\n        }\r\n        if (!date.isValid()) {\r\n            errors.push(\"Movie release date is not correct.\");\r\n        }\r\n        if (errors.length > 0) {\r\n            setErrorMessages(errors);\r\n        } else {\r\n            editMovie(String(data?.getMovie?.id), name, date, duration ?? 0, actors)\r\n                .then(() => {\r\n                    backToMovieDetails();\r\n                })\r\n                .catch((error) => setErrorMessages([error.message]));\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={styles.mainContainer}>\r\n            <div className={styles.formContainer}>\r\n                <h1>Edit movie</h1>\r\n                <ErrorMessage errorMessages={errorMessages}/>\r\n                <div className={styles.formItem}>\r\n                    <MovieNameInput name={name} setName={setName}/>\r\n                </div>\r\n                <div className={styles.formItem}>\r\n                    <ReleaseDateInput date={date} setDate={setDate}/>\r\n                </div>\r\n                <div className={styles.formItem}>\r\n                    <div>\r\n                        {duration && <DurationInput duration={duration} setDuration={handleDuration}/>}\r\n                    </div>\r\n                </div>\r\n                <div className={styles.formItem}>\r\n                    <ActorsInput actors={actors} setActors={handleActors}/>\r\n                </div>\r\n                <div>\r\n                    <div className={styles.actionButtons}>\r\n                        <div className={styles.actionButton}>\r\n                            <Button variant=\"outlined\" color=\"primary\" onClick={handleMovieEdit}>\r\n                                Edit Movie\r\n                            </Button>\r\n                        </div>\r\n                        <div className={styles.actionButton}>\r\n                            <Button variant=\"outlined\" color=\"default\" onClick={backToMovieDetails}>\r\n                                Back to movie details\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>);\r\n\r\n};\r\n","import React from 'react';\nimport './App.module.sass';\nimport {ApolloProvider} from \"@apollo/client\";\nimport MainDashboard from \"./components/MainDashboard/MainDashboard\";\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport {SignIn} from \"./components/UserManagament/SignIn\";\nimport Register from \"./components/UserManagament/Register\";\nimport ClientFaultPage from \"./components/ClientFaultPage/ClientFaultPage\";\nimport {useAppApolloClient} from \"./hooks/useAppApolloClient\";\nimport Header from \"./components/Header/Header\";\nimport AddMovie from \"./components/MovieInput/AddMovie\";\nimport {RouteComponentProps} from \"react-router\";\nimport MovieDisplay from \"./components/MovieDisplay/MovieDisplay\";\nimport {EditMovie} from \"./components/MovieInput/EditMovie\";\nimport styles from \"./App.module.sass\";\n\nconst App = () => {\n    const client = useAppApolloClient();\n\n    const renderSelectedMovie = (routerProps: RouteComponentProps<any>) => {\n        return <MovieDisplay selectedMovieId={routerProps.match.params.movieId}/>\n    }\n\n    const renderMovieEdition = (routerProps: RouteComponentProps<any>) => {\n        return <EditMovie selectedMovieId={routerProps.match.params.movieId}/>\n    }\n\n    return (\n        <ApolloProvider client={client}>\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\n                <div className={styles.appContainer}>\n                    <Header/>\n                    <Switch>\n                        <Route exact path=\"/\" component={MainDashboard}/>\n                        <Route exact path=\"/sign-in\" component={SignIn}/>\n                        <Route exact path=\"/register\" component={Register}/>\n                        <Route exact path=\"/add-movie\" component={AddMovie}/>\n                        <Route path=\"/movies/:movieId\" render={(routerProps) =>\n                            renderSelectedMovie(routerProps)\n                        }/>\n                        <Route path=\"/edit-movie/:movieId\" render={(routerProps) =>\n                            renderMovieEdition(routerProps)\n                        }/>\n                        <Route path=\"*\" render={() => <ClientFaultPage text=\"404 Not Found\"/>}/>\n                    </Switch>\n                </div>\n            </BrowserRouter>\n        </ApolloProvider>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {CookiesProvider} from \"react-cookie\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <CookiesProvider>\n            <App/>\n        </CookiesProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"MovieInput_mainContainer__kBMeJ\",\"formContainer\":\"MovieInput_formContainer__rPvP3\",\"formItem\":\"MovieInput_formItem__30MsB\",\"actionButtons\":\"MovieInput_actionButtons__25wgY\",\"actionButton\":\"MovieInput_actionButton__1iUwx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"UserManagement_mainContainer__1GHGo\",\"registerHint\":\"UserManagement_registerHint__2aWz8\",\"formContainer\":\"UserManagement_formContainer__2ZMmQ\",\"formItem\":\"UserManagement_formItem__205wM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"MovieDisplay_mainContainer__12AI2\",\"detailsContainer\":\"MovieDisplay_detailsContainer__2ZDU-\",\"actionButtons\":\"MovieDisplay_actionButtons__RcfPs\",\"actionButton\":\"MovieDisplay_actionButton__3ZO84\",\"detailsInfoContainer\":\"MovieDisplay_detailsInfoContainer__3WtPy\",\"inputFormItem\":\"MovieDisplay_inputFormItem__26umc\",\"comments\":\"MovieDisplay_comments__Lvz3F\",\"rateInput\":\"MovieDisplay_rateInput__2aQiH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dashboardContainer\":\"MainDashboard_dashboardContainer__sT_Dq\",\"dataGridContainer\":\"MainDashboard_dataGridContainer__1S24S\",\"infoDialog\":\"MainDashboard_infoDialog__uXiJb\",\"actorsCell\":\"MainDashboard_actorsCell__3Ejhr\"};"],"sourceRoot":""}